{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Xi","tagline":"A simple scripting language written in Java","google":"","body":"Xi <sub>*beta*</sub>\r\n=======\r\n**a simple scripting language written in Java**\r\n\r\nThe goal of Xi is to allow users to write concise code that can carry out complicated tasks. Some concepts are borrowed from Python, others from\r\nJava, but most are original. Be sure to check out the [wiki](https://github.com/arshajii/Xi/wiki) to learn more.\r\n\r\nInstalling and Running\r\n----------------------\r\n\r\nCurrently the easiest way to do this is to clone the repository and make use of the [`Xi.java`](https://github.com/arshajii/xi/blob/master/src/org/xiscript/xi/Xi.java) file. A more robust and portable shell script will be added to run Xi code in the near future. \r\n\r\nExamples\r\n--------\r\n\r\nRefer to the [examples](https://github.com/arshajii/Xi/tree/master/examples) folder for a full list of examples and descriptions.\r\n\r\n### hello.xi  \r\n\r\n```ruby\r\nprintln \"hello world\"\r\n```\r\n \r\nNot much to say here - just a simple \"hello world\" program.\r\n\r\n---\r\n\r\n### euler1.xi\r\n\r\n```ruby\r\nprintln $ / , 1000 {| ! % . 3 ! % . 5}\r\n```\r\n\r\nThis is a solution to [Problem #1](http://projecteuler.net/problem=1) of [Project Euler](http://projecteuler.net). The problem reads as follows:\r\n\r\n>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\r\nFind the sum of all the multiples of 3 or 5 below 1000.\r\n\r\nFirst, we create a list of integers from `0` to `999` with `, 1000`. Next, we filter this list (using `/`) with the block `{| ! % . 3 ! % . 5}`; in other words,\r\nwe remove any element `.` for which `{| ! % . 3 ! % . 5}` is *not* true. Further, this block only returns true if `.` is either divisible by `3` (i.e.\r\n`! % . 3`) or if it is divisible by `5` (i.e. `! % . 5`). This results in a list of all multiples of either `3` or `5` less than `1000`. Lastly, we\r\nfind the sum of this list using `$`, resulting in the desired answer.\r\n\r\nEquivalent (in the sense that it also solves the problem) code in Java would be:\r\n\r\n```java\r\npublic class Euler1 {\r\n\tpublic static void main(String[] args) {\r\n\t\tint sum = 0;\r\n\t\tfor (int i = 1 ; i < 1000 ; i++)\r\n\t\t\tif (i % 3 == 0 || i % 5 == 0)\r\n\t\t\t\tsum += i;\r\n\t\tSystem.out.println(sum);\r\n\t}\r\n}\r\n```\r\n\r\n---\r\n\r\n### factorial2.xi\r\n\r\n```ruby\r\nfactorial := func (\"n\") {\r\n\tif < n 2 {\r\n\t\treturn 1\r\n\t} {\r\n\t\treturn * n factorial - n 1\r\n\t} \t\r\n}\r\n\r\nfor \"i\" , 10 {\r\n\tprintln factorial i\r\n}\r\n```\r\n\r\nThis example exhibits the classic recursive factorial function, which works based on the fact that `0! = 1` and `n! = n * (n-1)!` for all `n` greater than `0`.\r\n\r\nThe `if`-statement within the `factorial` function checks if `n` is less than `2` (we could have also checked that `n` is less than `1` but since `0! = 1! = 1` we might as well include both `0` and `1` in the condition). If this condition is true, we know that `n` is either `0` or `1` and hence we return `1`. Otherwise, we return `n` multuplied by `factorial - n 1`, for the reason outlined above.\r\n\r\nThe subsequent `for`-loop simply prints the factorials of every integer from `0` through `9` to ensure that everything is in order.\r\n\r\n---\r\n\r\n### fibonacci.xi\r\n\r\n```ruby\r\nn := 5\r\nprintln + \"First \" + n \" Fibonacci numbers:\"\r\n\r\na := 0\r\nb := 1\r\ndo n {\r\n    c := a\r\n\ta := + a b\r\n\tb := c\r\n\tprintln b\r\n}\r\n```\r\n    \r\nThis code prints the first `n` terms of the Fibonacci sequence. We first define `a` and `b` to be the first and second terms of the sequence, respectively.\r\nThen we have a `do`-loop which performs `n` iterations, shifting `a` and `b` one step up the sequence and printing the appropriate term on each iteration.\r\nTo \"shift up the sequence\" we simply assign the old value of `a` to `b` and assign the `a + b` to `a`.\r\n\r\nTo Do\r\n-----\r\n\r\n### Language-Related\r\n- `[✓]` Implement lists subtypes thereof.\r\n- `[✓]` Allow for the creation of variables.\r\n- `[✓]` Overload various operations for various other data types, e.g. `+` for lists.\r\n- `[✓]` Implement sets and set operations.\r\n- `[✓]` Allow for the easy creation of custom functions from within Xi.\r\n- `[ ]` Make a smarter parser so as to give the user more flexibility.\r\n- `[ ]` More accurate and more specific error messages, including line number and specifically why an error occured.\r\n- `[ ]` Add a *long* or *BigInteger* numerical data type.\r\n\r\n### Other\r\n- `[✓]` Include domain name in Java source package name.\r\n- `[ ]` More comprehensive and up-to-date documentation.\r\n- `[ ]` More comprehensive and up-to-date to-do list.\r\n\r\nLicense\r\n-------\r\n\r\nThis content is released under the MIT License. See [`LICENSE.txt`](https://github.com/arshajii/xi/blob/master/LICENSE.txt) for details.\r\n"}